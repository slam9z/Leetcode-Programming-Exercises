/**
 * Created by yongchizhang on 17/6/22.
 */
public class OneInNum {

    public boolean isOdd(int a){
        if((a&1) != 1){   //是奇数
            return true;
        }
        return false;
    }

    int countBits(int n) {
        int count = 0;
        while(n != 0) {
            n = n & (n-1);
            count++;
        }
        return count;
    }

    /*

计算机里的数字本来就是用二进制存的，所以计算过程也都是二进制计算。利用一些位运算的特性，可以很容易计算1的个数。

有一个很有意思的特性：随便给一个二进制数，比如n=10001100，我们把它减一：n-1=10001011。重新摆放一下观察：

10001100 (n)

10001011 (n-1)

通过观察得出，n中为1的最低位是第3位，而n-1和n的低3位全都不同。如果进行“按位与”操作，即 n & (n-1) = 10001000。

10001100 (n)

10001011 (n-1)

10001000 (n & (n-1))

可以看到底3位都变成了0。

如果你数学足够好，可以得出结论：

[结论]要消除整数n最低位的1，可以使用 n = n & (n-1)。


    * */

}
